# UBOOT
source_dir (){
mkdir -p ${SRC}
cp -f soc.txt ${SRC}/
cd ${SRC}
rm -fdr u-boot
}

bcm2711_uboot(){
echo_duboot
if ls u-boot-${UBOOT_VERSION}.tar.gz > /dev/null 2>&1
	then echo -e "${YLW}u-boot-${UBOOT_VERSION}.tar.gz found${FIN}.";
	else aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 https://github.com/pyavitz/debian-image-builder/releases/download/u-boot-${UBOOT_VERSION}/u-boot-${UBOOT_VERSION}.tar.gz && echo_bdone;
fi
bcmbuild_uboot
}

bcmbuild_uboot(){
echo
echo_extract
tar -xf u-boot-${UBOOT_VERSION}.tar.gz
echo_done
mv -f u-boot-${UBOOT_VERSION} u-boot
cp -f soc.txt u-boot/
cd u-boot
echo
export ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu-
bcm2711_uboot_defconfig
make -j${CORES} rpi_4_defconfig
if `grep -Fx "menuconfig=1" "../../userdata.txt" >/dev/null;`
    then make menuconfig;
fi
echo
echo_cuboot
make -j${CORES}
}

bcm2711_uboot_defconfig(){
echo CONFIG_SD_BOOT=y >> configs/rpi_4_defconfig
echo CONFIG_EXT4_WRITE=y >> configs/rpi_4_defconfig
}

bcm2711_binary(){
mkdir -p ../${TPI4}
cp -f u-boot.bin ../${TPI4}/
echo_done
echo
}

bcm2711_uboot_string(){
source_dir
bcm2711_uboot
bcm2711_binary
}

# STAGE 1
partition_uuid(){
BOOT_UUID=$(blkid -o export -- "${IMAGE_LOOP_DEV_BOOT}" | sed -ne 's/^UUID=//p')
ROOT_UUID=$(blkid -o export -- "${IMAGE_LOOP_DEV_ROOTFS}" | sed -ne 's/^UUID=//p')
ROOT_PARTUUID=$(blkid -o export -- "${IMAGE_LOOP_DEV_ROOTFS}" | sed -ne 's/^PARTUUID=//p')

echo BOOT_UUID='"'$BOOT_UUID'"' > part-uuid.txt
echo ROOT_UUID='"'$ROOT_UUID'"' >> part-uuid.txt
echo ROOT_PARTUUID='"'$ROOT_PARTUUID'"' >> part-uuid.txt

source part-uuid.txt
}

extlinux(){
mkdir -p p1/extlinux
tee p1/extlinux/extlinux.conf <<EOF
label kernel
    kernel /kernel8.img
    append earlyprintk initrd=/uInitrd console=serial0,115200 console=tty1 rw root=PARTUUID=${ROOT_PARTUUID} rootfstype=ext4 fsck.repair=yes logo.nologo net.ifnames=0 rootwait
EOF
}

create_extlinux(){
extlinux > /dev/null 2>&1
if ls p1/extlinux/extlinux.conf > /dev/null 2>&1
	then echo && echo -n "extlinux.conf " && sleep 1s && echo_nok;
	else echo && echo -n "extlinux.conf " && sleep 1s && echo_fail && exit;
fi
}

bullseye_config(){
tee p1/config.txt <<EOF
arm_64bit=1
kernel=u-boot.bin

disable_overscan=1
gpu_mem=256
#dtparam=i2c_arm=on
#dtparam=i2s=on
#dtparam=spi=on
dtparam=audio=on
enable_uart=1
disable_splash=1
#dtoverlay=vc4-fkms-v3d
dtoverlay=vc4-kms-v3d
max_framebuffers=1
# overclock
arm_freq=1750
gpu_freq=750
over_voltage=6
EOF
}

u-boot_bootbins(){
mkdir -p firmware/boot
echo
wget -cq -P firmware/boot https://github.com/raspberrypi/firmware/raw/master/boot/fixup4.dat
if ls firmware/boot/fixup4.dat > /dev/null 2>&1
	then echo -n "fixup4.dat " && echo_nok;
	else echo -n "fixup4.dat " && echo_fail && exit;
fi
echo
wget -cq -P firmware/boot https://github.com/raspberrypi/firmware/raw/master/boot/start4.elf
if ls firmware/boot/start4.elf > /dev/null 2>&1
	then echo -n "start4.elf " && echo_nok;
	else echo -n "start4.elf " && echo_fail && exit;
fi
echo
if ls output/traditional/u-boot.bin > /dev/null 2>&1
	then echo -n "u-boot.bin " && echo_nok;
	else echo -n "u-boot.bin " && echo_fail && exit;
fi
echo
install -v -m 0644 firmware/boot/fixup4.dat p1/ > /dev/null 2>&1
install -v -m 0644 firmware/boot/start4.elf p1/ > /dev/null 2>&1
install -v -m 0644 output/traditional/u-boot.bin p1/ > /dev/null 2>&1
if ls p1/{fixup4.dat,start4.elf,u-boot.bin} > /dev/null 2>&1
	then echo -n "install " && echo_bdone;
	else echo -n "install " && echo_fail && exit;
fi
}

cmdline(){
tee p1/cmdline.txt <<EOF
console=serial0,115200 console=tty1 root=PARTUUID=${ROOT_PARTUUID} rootfstype=ext4 elevator=deadline fsck.repair=yes logo.nologo net.ifnames=0 rootwait
EOF
}

foundation_config(){
tee p1/config.txt <<EOF
arm_64bit=1
kernel=kernel8.img

# For more options and information see
# http://rpf.io/configtxt
# Some settings may impact device functionality. See link above for details

# uncomment if you get no picture on HDMI for a default "safe" mode
#hdmi_safe=1

# uncomment this if your display has a black border of unused pixels visible
# and your display can output without overscan
disable_overscan=1

# uncomment the following to adjust overscan. Use positive numbers if console
# goes off screen, and negative if there is too much border
#overscan_left=16
#overscan_right=16
#overscan_top=16
#overscan_bottom=16

# uncomment to force a console size. By default it will be display's size minus
# overscan.
#framebuffer_width=1280
#framebuffer_height=720

### uncomment to set display to 1024x768
#overscan_left=0
#overscan_right=0
#overscan_top=0
#overscan_bottom=0

#framebuffer_width=1024
#framebuffer_height=768
#framebuffer_depth=16

#hdmi_group=2
#hdmi_mode=16

# uncomment if hdmi display is not detected and composite is being output
#hdmi_force_hotplug=1

# uncomment to force a specific HDMI mode (this will force VGA)
#hdmi_group=1
#hdmi_mode=1

# uncomment to force a HDMI mode rather than DVI. This can make audio work in
# DMT (computer monitor) modes
#hdmi_drive=2

# uncomment to increase signal to HDMI, if you have interference, blanking, or
# no display
#config_hdmi_boost=4

# uncomment for composite PAL
#sdtv_mode=2

# camera
#start_x=1
gpu_mem=128

# uncomment to overclock the arm. 700 MHz is the default.
#arm_freq=800

# uncomment some or all of these to enable the optional hardware interfaces
#dtparam=i2c_arm=on
#dtparam=i2s=on
#dtparam=spi=on

# uncomment this to enable infrared communication.
#dtoverlay=gpio-ir,gpio_pin=17
#dtoverlay=gpio-ir-tx,gpio_pin=18

# additional overlays and parameters are documented /boot/overlays/README

# enable audio (loads snd_bcm2835)
dtparam=audio=on

# enable uart
enable_uart=0

# Disable wifi and bluetooth
#dtoverlay=disable-wifi
#dtoverlay=disable-bt

# Remove test rainbow
disable_splash=1

[pi4]
# enable DRM VC4 V3D driver on top of the dispmanx display stack
#dtoverlay=vc4-fkms-v3d
dtoverlay=vc4-kms-v3d
max_framebuffers=2
EOF
}

foundation_bootbins(){
mkdir -p firmware/boot
echo
wget -cq -P firmware/boot https://github.com/raspberrypi/firmware/raw/master/boot/fixup4.dat
if ls firmware/boot/fixup4.dat > /dev/null 2>&1
	then echo -n "fixup4.dat " && echo_nok;
	else echo -n "fixup4.dat " && echo_fail;
fi
echo
wget -cq -P firmware/boot https://github.com/raspberrypi/firmware/raw/master/boot/fixup4cd.dat
if ls firmware/boot/fixup4cd.dat > /dev/null 2>&1
	then echo -n "fixup4cd.dat " && echo_nok;
	else echo -n "fixup4cd.dat " && echo_fail;
fi
echo
wget -cq -P firmware/boot https://github.com/raspberrypi/firmware/raw/master/boot/fixup4db.dat
if ls firmware/boot/fixup4db.dat > /dev/null 2>&1
	then echo -n "fixup4db.dat " && echo_nok;
	else echo -n "fixup4db.dat " && echo_fail;
fi
echo
wget -cq -P firmware/boot https://github.com/raspberrypi/firmware/raw/master/boot/fixup4x.dat
if ls firmware/boot/fixup4x.dat > /dev/null 2>&1
	then echo -n "fixup4x.dat " && echo_nok;
	else echo -n "fixup4x.dat " && echo_fail;
fi
echo
wget -cq -P firmware/boot https://github.com/raspberrypi/firmware/raw/master/boot/start4.elf
if ls firmware/boot/start4.elf > /dev/null 2>&1
	then echo -n "start4.elf " && echo_nok;
	else echo -n "start4.elf " && echo_fail;
fi
echo
wget -cq -P firmware/boot https://github.com/raspberrypi/firmware/raw/master/boot/start4cd.elf
if ls firmware/boot/start4cd.elf > /dev/null 2>&1
	then echo -n "start4cd.elf " && echo_nok;
	else echo -n "start4cd.elf " && echo_fail;
fi
echo
wget -cq -P firmware/boot https://github.com/raspberrypi/firmware/raw/master/boot/start4db.elf
if ls firmware/boot/start4db.elf > /dev/null 2>&1
	then echo -n "start4db.elf " && echo_nok;
	else echo -n "start4db.elf " && echo_fail;
fi
echo
wget -cq -P firmware/boot https://github.com/raspberrypi/firmware/raw/master/boot/start4x.elf
if ls firmware/boot/start4x.elf > /dev/null 2>&1
	then echo -n "start4x.elf " && echo_nok;
	else echo -n "start4x.elf " && echo_fail;
fi
echo
wget -cq -P firmware/boot https://github.com/raspberrypi/firmware/raw/master/boot/LICENCE.broadcom
wget -cq -P firmware/boot https://github.com/raspberrypi/firmware/raw/master/boot/COPYING.linux

install -v -m 0644 firmware/boot/fixup4*.dat p1/ > /dev/null 2>&1
install -v -m 0644 firmware/boot/start4*.elf p1/ > /dev/null 2>&1
install -v -m 0644 firmware/boot/LICENCE.broadcom p1/ > /dev/null 2>&1
install -v -m 0644 firmware/boot/COPYING.linux p1/ > /dev/null 2>&1
if ls p1/{fixup4.dat,fixup4cd.dat,fixup4db.dat,fixup4x.dat,start4.elf,start4cd.elf,start4db.elf,start4x.elf} > /dev/null 2>&1
	then echo -n "install " && echo_bdone;
	else echo -n "install " && echo_fail && exit;
fi
}

foundation_desktop(){
echo && echo
echo -e -n "${RED}Installing boot bits${FIN}."
cmdline > /dev/null 2>&1
if ls p1/cmdline.txt > /dev/null 2>&1
	then echo && echo -n "cmdline.txt " && sleep 1s && echo_nok;
	else echo && echo -n "cmdline.txt " && sleep 1s && echo_fail && exit;
fi
### config dot txt
if `grep -Fx "uboot=0" "userdata.txt" >/dev/null;`
	then foundation_config > /dev/null 2>&1;
fi
if ls p1/config.txt > /dev/null 2>&1
	then echo && echo -n "config.txt " && sleep 1s && echo_nok;
	else echo && echo -n "config.txt " && sleep 1s && echo_fail && exit;
fi
foundation_bootbins
}

uboot_desktop(){
echo
echo -e -n "${RED}Installing boot bits${FIN}."
create_extlinux;
if `grep -Fx 'DISTRO_VERSION="bullseye"' "userdata.txt" >/dev/null;`
	then bullseye_config > /dev/null 2>&1;
fi
if ls p1/config.txt > /dev/null 2>&1
	then echo && echo -n "config.txt " && sleep 1s && echo_nok;
	else echo && echo -n "config.txt " && sleep 1s && echo_fail && exit;
fi
u-boot_bootbins
}
